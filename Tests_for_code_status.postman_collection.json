{
	"info": {
		"_postman_id": "47f5e11f-455d-44db-9abd-992a81dd443e",
		"name": "Tests_for_code_status",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"http://162.55.220.72:5005/first",
							"// 1. Проверка что статус код содержит 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Ожидается, что статус код 200 будет одним из кодов (201, 200, 202)",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 200, 202]);",
							"});",
							"",
							"// 3. Проверить, что в статусе ответа приходит правильный string.",
							"",
							"pm.test(\"Status code to.have.status('OK')\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"// // 4. to.include для статус кода применить не можем (только для массив, карту, объект, набор, строку или слабый набор вместо строки)",
							"",
							"// pm.test(\"test через to.include\", function () {",
							"//     pm.expect(pm.response.code).to.include(\"200\");",
							"// });",
							"",
							"// 5. Проверить, что в статусе код ответа соответствует типу, то есть число 200.",
							"",
							"pm.test(\"test через to.eql\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"// 6. Проверить, что в статусе код ответа соответствует типу, то есть число 200.",
							"",
							"pm.test(\"test через to.equal\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"// 7. Проверить, что статус код ответа меньше того числа с которым сравниваем.",
							"",
							"pm.test(\"Status code через to.be.below\", function () {",
							"    pm.expect(pm.response.code).to.be.below(210);",
							"});",
							"",
							"// 8. Проверить, что статус код ответа больше того числа с которым сравниваем.",
							"",
							"pm.test(\"Status code через to.be.above\", function () {",
							"    pm.expect(pm.response.code).to.be.above(100);",
							"});",
							"",
							"",
							"// 9. Проверить, что статус код ответа начинается c 2XX.",
							"",
							"pm.test(\"Status code - success\", function () {",
							"    pm.response.to.be.success;",
							"});",
							"",
							"// 10. Проверить, что статус код ответа ok.",
							"",
							"pm.test(\"Status code must be 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"// Chai official doc",
							"// 11. Проверить, что статус код ответа не 400.",
							"",
							"pm.test(\"Status code is not 400\", function () {",
							"    pm.response.to.not.have.status(400);",
							"});  ",
							"",
							"// 12. Проверить, что статус код ответа === 200.",
							"",
							"pm.test(\"Status code to.deep.equal 200\", function () {",
							"    pm.expect(pm.response.code).to.deep.equal(200);",
							"});",
							"",
							"",
							"// // 13. работает для массива, объекта.",
							"",
							"// pm.test(\"Status code to.deep.include\", function () {",
							"//     pm.response.to.deep.include(200);",
							"// });",
							"",
							"// 14. Проверить, что статус код ответа не строка.",
							"",
							"pm.test(\"Status code to.not.be.a string\", function () {",
							"    pm.expect(pm.response.code).to.not.be.a('string');",
							"});",
							"",
							"// 15. Проверить, что статус код ответа число.",
							"",
							"pm.test(\"Status code to.be.a number\", function () {",
							"    pm.expect(pm.response.code).to.be.a('number');",
							"});",
							"",
							"// 16. Проверить, что статус код ответа не error.",
							"pm.test(\"Status code to.not.be.an error \", function () {",
							"    pm.expect(pm.response.code).to.not.be.an('error');",
							"});",
							"",
							"// 17. Проверить, что статус код ответа истина..",
							"",
							"pm.test(\"Status code to.be.true\", function () {",
							"    pm.expect(pm.response.code === 200).to.be.true;",
							"});",
							"",
							"// 18. Проверить, что статус код ответа не  null",
							"",
							"pm.test(\"Status code to.not.be.null\", function () {",
							"    pm.expect(pm.response.code).to.not.be.null;",
							"});",
							"",
							"// 19.  Проверить, что статус код ответа не  undefined",
							"",
							"pm.test(\"Status code to.not.be.undefined\", function () {",
							"    pm.expect(pm.response.code).to.not.be.undefined;",
							"});",
							"",
							"// 20. Проверить, что статус код ответа не NaN",
							"",
							"pm.test(\"Status code to.not.be.NaN\", function () {",
							"    pm.expect(pm.response.code).to.not.be.NaN;",
							"});",
							"",
							"// 21. Проверить, что статус код ответа не NaN и не undefined",
							"",
							"pm.test(\"Status code to.exist\", function () {",
							"    pm.expect(pm.response.code).to.exist;",
							"});",
							"",
							"// 22. Проверить, что статус код ответа больше или равно",
							"",
							"pm.test(\"Status code to.least\", function () {",
							"    pm.expect(pm.response.code).to.be.at.least(100);",
							"});",
							"",
							"// 23. Проверить, что статус код ответа меньше или равно",
							"",
							"pm.test(\"Status code to.be.at.most\", function () {",
							"    pm.expect(pm.response.code).to.be.at.most(300);",
							"});",
							"",
							"// 24. Проверить, что статус код ответа принадлежит диапазону",
							"",
							"pm.test(\"Status code to.be.within\", function () {",
							"    pm.expect(pm.response.code).to.be.within(190, 300);",
							"});",
							"",
							"// 25. Проверить, что статус код ответа не является NaN или Infinity",
							"",
							"pm.test(\"Status code to.be.finite\", function () {",
							"    pm.expect(pm.response.code).to.be.finite;",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	]
}